(defvar worker-proc nil)
(defvar worker-client-proc nil)

(defun worker-recurse (worker-input)
  (print (format "\n;;initial score %s" (score-cube (worker-data-cube worker-input))))
  (setq cube-cache (make-hash-table :test 'equal))
  (garbage-collect)
  (setq solved (worker-cube-recurse
                (worker-data-cube worker-input)
                '()
                0
                (worker-data-depth worker-input)
                (new-max-cube (worker-data-cube worker-input))))
  (print (format "\n;;END TIME %s\n" (current-time-string)))
  (print (format "\n;; %s %s %s\n" iteration-count (max-cube-score solved) (max-cube-actions solved)))
  (print (print-cube (max-cube-cube solved)))
  (clrhash cube-cache)
  solved)

(defun worker-cube-recurse  (cube moves depth max-depth max-cube-info worker-idx)
  (if (eq depth 0)
      (print (format "\n;; Start\n %s" (print-cube cube))))
  (if (eq 999999 (% iteration-count 1000000))
      (progn (print (format "\n;;%s\n" (garbage-collect)))
             (setq iteration-count 0))
    (setq iteration-count (1+ iteration-count)))
  (defun solution-not-found ()
    (puthash cube t cube-cache)
    (if (> (score-cube cube) (max-cube-score max-cube-info))
        (setq max-cube-info (list (score-cube cube) moves cube)))
    (if (and (<= depth max-depth) (eq nil (have-4-sequences moves)))
        (dolist (elt rubiks-moves-list)
          (setq max-cube-info
                (worker-cube-recurse (rotate-side-clockwise cube elt)
                              (append moves (list elt)) (1+ depth) max-depth max-cube-info))
          (if (eq 54 (max-cube-score max-cube-info))
              (return))))
    max-cube-info)
  (progn
    (setq found-in-hash (gethash cube cube-cache nil))
    (if (not (eq found-in-hash nil))
        max-cube-info
      (if (eq 54 (score-cube cube))
          (list 54 moves cube)
        (solution-not-found)))))

(defun worker-filter (proc string)
  (let (worker-output)
    (print (format "\n;;%s\n" string))
    (setq worker-input (eval-string string))
    (setq worker-output (worker-recurse worker-input))
    (process-send-string worker-client-proc (format "%s" worker-output))))

(defun worker-start (port server-port)
  (setq worker-client-proc (worker-client server-port))
  (setq worker-proc (worker port worker-filter)))

(worker 9997)
